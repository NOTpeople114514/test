plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net" }  // Fabric官方仓库
    maven { url = "https://libraries.minecraft.net" }  // Minecraft官方库
    maven { url = 'https://plugins.gradle.org/m2/' }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {url = 'https://maven.scijava.org/content/repositories/public/'}

    mavenLocal()
    flatDir {
        dirs "libs"
    }
}
fabricApi {
    configureDataGeneration {
        client = true
    }
}
loom {
    splitEnvironmentSourceSets()  // 分离客户端/服务端源集

    mods {
        "bluetoothmultiplayer" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

configurations.configureEach {
    resolutionStrategy {
        force "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
        force "com.mojang:minecraft:${project.minecraft_version}"
        force "net.fabricmc:fabric-loader:${project.loader_version}"
    }
}

dependencies {
    // Minecraft基础依赖（确保版本匹配）
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "com.terraformersmc:modmenu:7.2.2"

    implementation "net.sf.bluecove:bluecove:2.1.1"
    include("net.sf.bluecove:bluecove:2.1.1")

    //implementation "javax.usb:usb-api:1.0.2"
    //implementation "org.usb4java:usb4java-javax:1.3.0"

}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": inputs.properties.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    it.options.release = 17
}

java {
    withSourcesJar()
}

jar {
    inputs.property "archivesName", project.base.archivesName

    from("LICENSE") {
        rename { "${it}_${inputs.properties.archivesName}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    repositories {
        mavenLocal()
    }
}